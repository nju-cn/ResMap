# Configuration file path of logging
log_cfg: logging.yml

# Local ports listened by each service
port:
  master: 11110
  trainer: 22220
  worker: [33330, 33331, 33332]
# Network address when accessing. m, t, w0 correspond to master, trainer, worker0 respectively.
net:
  m->t: 'localhost:22220'
  m->w0: 'localhost:33330'
  m->w1: 'localhost:33331'
  m->w2: 'localhost:33332'
  w0->w1: 'localhost:33331'
  w1->w2: 'localhost:33332'
#  m->t: '114.212.84.93:22220'
#  m->w0: '192.168.0.114:33330'
#  m->w1: '114.212.84.93:33331'
#  m->w2: '121.199.15.155:33332'
#  w0->w1: '114.212.84.93:33331'
#  w1->w2: '121.199.15.155:33332'

# DNN load function, use this to choose dnn
dnn_loader: !!python/name:dnn_models.chain.prepare_alexnet
# Path of the input video file
video_path: media/road.mp4
# Adjust the input frame to [nrow, ncol], which is a tuple of two int. None indicates don't resize.
frame_size: !!python/tuple [480, 720]
# "itg" or "dif". This option generates two corresponding options: executor_type and job_type
mode: dif
# Whether check the correctness of result
check: !!bool true

# Configuration of master
master:
  ifr_num: 3  # Total frame to be processed
  pd_num: 2  # How many frames are pending at the same time, 0 means unlimited
  itv_time: 0  # How long to wait after issuing an IFR, for debugging only. Normally it should be 0
  scheduler: !!python/name:schedulers.nsc_scheduler.NSCScheduler
  LBCScheduler:
  NSCScheduler:
  # len(bandwidth) must be equal to len(worker).
  # bandwidth[w] = bandwidth(MB) between w-1 and w. bandwidth[0] refers to master and worker0.
  bandwidth: [5.34, 7.61, 1.66]
# Configuration of worker
worker:
  prof_niter: 5
# Configuration of trainer
trainer:
  frame_num: 400